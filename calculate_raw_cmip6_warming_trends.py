# -*- coding: utf-8 -*-
"""calculate_raw_cmip6_warming_trends

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZF-2d9Fbs0Uzh5_jNtiwRH6tOfzNDxMN

This code was developed on run on https://colab.research.google.com/. Running it locally can be challenging due to memory issues. Written by Kalle Nordling.
"""



import xarray as xr
import numpy as np
import pandas as pd
import fsspec
import gcsfs

df = pd.read_csv('https://storage.googleapis.com/cmip6/cmip6-zarr-consolidated-stores.csv')
df_tas = df[(df.table_id.isin(['Amon'])) & (df.variable_id.isin(['tas'])) & df.experiment_id.isin(['historical','ssp119','ssp585','ssp126']) & (df.member_id == 'r1i1p1f1') ]
#df_tas = df[(df.table_id.isin(['Amon'])) & (df.variable_id.isin(['tasmax','tas','tasmin']))]
df_tas

a=df_tas[df_tas.experiment_id == "ssp126"].source_id.values
b=df_tas[df_tas.experiment_id == "ssp585"].source_id.values
models=np.intersect1d(a,b)
models=list(models)
models.remove('ACCESS-CM2')
models.remove('ACCESS-ESM1-5')
df_tas = df[(df.table_id.isin(['Amon'])) & (df.variable_id.isin(['tas'])) & df.experiment_id.isin(['historical','ssp119','ssp585','ssp126']) & (df.member_id == 'r1i1p1f1') & df.source_id.isin(models) ]
df_tas[df_tas.experiment_id == "ssp119"].source_id.values

def load_data(source_id, expt_id,var):
    #get list of urls
    uri = df_tas[(df_tas.source_id == source_id) & (df_tas.experiment_id == expt_id) & (df_tas.variable_id == var)].zstore
    #get list of member_id's
    member_id = df_tas[(df_tas.source_id == source_id) &
                         (df_tas.experiment_id == expt_id) & (df_tas.variable_id == var)].member_id#.values[0]
    #concentrate all members to single xarray dataframe
    dss = []
    for ur in uri.values:
        print(ur)
        mapper=gcs.get_mapper(ur)
        dss.append(xr.open_zarr(mapper, consolidated=True))
    try:
      ds= xr.concat(dss,dim='member_id').assign_coords(source_id=list(member_id))
      return ds
    except:
      return 0
source_ids = df_tas.source_id.unique()
results={}
gcs = gcsfs.GCSFileSystem(token='anon')
for exp in ['historical','ssp126','ssp119','ssp585']:
  results[exp]={}
  for model in source_ids:
    print(model,exp)
    data = load_data(model,exp,'tas')
    if data != 0:
      results[exp][model]=data#load_data(model,exp,'hurs')

results.items()

import matplotlib.pyplot as plt

def calcMean(data):
    if data is None:
        return None
    if ('longitude' in data.dims) and ('latitude' in data.dims):
        data = data.rename({'longitude':'lon', 'latitude': 'lat'})
    print(data)
    data = data.sel(lon=slice(20,31),lat=slice(60,71))
    weights = np.cos(np.deg2rad(data.lat))
    weights.name = "weights"
    data_weighted = data.weighted(weights)
    data_mean= data_weighted.mean(("lon", "lat"))
    return data_mean

gmst_dicts = {}

for exp, dic in results.items():
    tmp = {}
    for model, data in dic.items():
        if model == "ICON-ESM-LR":
          continue
        tmp[model] = calcMean(data)


    gmst_dicts[exp] = tmp

gmst_dicts

gmst_anoms={}
for exp, data in gmst_dicts.items():
    gmst_anoms[exp] = {}
    for model,data in data.items():
      gmst_anoms[exp][model] = (data - (gmst_dicts['historical'][model].groupby('time.year').mean().sel(year=slice('1850','1900')).mean(dim=['year','member_id'])))

gmst_dicts.keys()

def is_amj(month):
    return (month >= 5) & (month <= 9)
glob =  gmst_dicts['historical']
dss = [ds.tas.sel(time=is_amj(ds['time.month'])).groupby('time.year').mean(dim='time') for key, ds in glob.items()]
historical_cmip6= xr.concat(dss,dim='source_id',coords='minimal').assign_coords(source_id=list(glob.keys()))


cmip_data={}

for exp in ['ssp119','ssp585','ssp126']:
    print(exp)
    glob = gmst_dicts[exp]
    dss = [ds.tas.sel(time=is_amj(ds['time.month'])).groupby('time.year').mean(dim='time') for key, ds in glob.items()]
    tmp2= xr.concat(dss,dim='source_id',coords='minimal').assign_coords(source_id=list(glob.keys()))


    models=list(gmst_dicts[exp].keys())
    hist_models=list(gmst_dicts['historical'].keys())
    sel_models=list(set(models).intersection(hist_models))

    hist_sel=historical_cmip6.sel(dict(source_id=sel_models))

    tmp2=tmp2.sel(dict(source_id=sel_models))
    hist_sel=hist_sel.sel(year=slice(1850,2014))
    sce= tmp2.sel(year=slice(2015,2100))
    sce_file=xr.concat([hist_sel,sce],dim='time').sum(dim='time')
    sce_file = sce_file.where(sce_file > 0)
    #sce_file-=273.15
    cmip_data[exp] = sce_file.load()

cmip_data[exp]

fig, ax = plt.subplots(1,1,figsize=[20,10])
colors = ['lime','tab:cyan', 'tab:blue', 'darkorange', 'tab:red']
for i,exp in enumerate(['ssp119','ssp126','ssp585']):
    tmp = cmip_data[exp]
    tmp=  tmp-(tmp.sel(year=slice('1850','1900')).mean(dim=['year','member_id']))

    data=tmp.isel(member_id=0).mean(dim='source_id')
    data.plot(label=exp,color=colors[i],linewidth=4)

    #for model in list(tmp.source_id):
    #    tmp.isel(member_id=0).sel(year=slice(1900,2020)).sel(source_id=model).plot(color=colors[i],linewidth=1,alpha=0.4)


plt.legend(fontsize=18)
plt.xticks(fontsize=18)
plt.yticks(fontsize=18)
plt.ylabel('Temperature  anomaly')
plt.show()

from sklearn.linear_model import LinearRegression


def calcTrend(data_in,year,step):
    linear_regressor = LinearRegression()
    stop=year+step
    if stop>2100:
        stop=2100
    X = data_in.sel(year=slice(str(year),str(stop))).year.to_masked_array().reshape(-1, 1)
    Y = data_in.sel(year=slice(str(year),str(stop))).to_masked_array().reshape(-1, 1)
    trend=np.nan
    try:
        linear_regressor.fit(X, Y)  # perform linear regression
        trend=linear_regressor.coef_[0]*10
    except:
        print('trend error')
    return trend

cmip6_trend_ssp={}


for ssp in ['ssp119','ssp126','ssp585']:
    cmip6_trend_ssp[ssp] = {}
    for m in cmip_data[ssp].isel(member_id=0).source_id:
        #try:
            name = str(m.to_masked_array())
            print(name)
            data =cmip_data[ssp].isel(member_id=0).sel(source_id=m)
            cmip6_trend_ssp[ssp][name] = {}
            for y_start in range(2020,2100,30):
                cmip6_trend_ssp[ssp][name][str(y_start)] = calcTrend(data,y_start,30)

#hist trend
cmip6_trend_hist = {}
for ssp in ['ssp585']:
    cmip6_trend_hist[ssp] = {}
    for m in cmip_data[ssp].isel(member_id=0).source_id:
        #try:
            name = str(m.to_masked_array())
            print(name)
            data =cmip_data[ssp].isel(member_id=0).sel(source_id=m)
            cmip6_trend_hist[ssp][name] = calcTrend(data,1980,40)

import seaborn as sns

def calcWmean(a,obs):
  a = np. squeeze(a)
  w=1/(np.abs(np.array(a)-obs))
  return np.average(a,weights=w), w

#e=['FGOALS-g3','EC-Earth3-Veg-LR','CAMS-CSM1-0']
sns.set()

plot_x={'2020':1,'2050':2,'2080':3}
plot_x2={'2020':1.25,'2050':2.25,'2080':3.25}
plot_x2={'hist':0.35,'2020':1.0,'2050':2.25,'2080':3.25}
fig,ax = plt.subplots(1,1,figsize=[20,15])

colors = ['lime','tab:cyan', 'tab:blue', 'darkorange', 'tab:red']

cmip6_mean_f={'2020':{'ssp119':[],'ssp126':[],'ssp245':[],'ssp370':[],'ssp585':[]},'2050':{'ssp119':[],'ssp126':[],'ssp245':[],'ssp370':[],'ssp585':[]},'2080':{'ssp119':[],'ssp126':[],'ssp245':[],'ssp370':[],'ssp585':[]}}
cmip6_mean_hist=[]
for i,exp in enumerate(['ssp585']):
    for j,(model,trend) in enumerate(cmip6_trend_hist[exp].items()):
        # if model in exclude:
        #    continue
        if (j == 0):
              ax.plot(plot_x2['hist']+0.15,trend,'*',color='gray',label='Hist',markersize=15)
        else:
              ax.plot(plot_x2['hist']+0.15,trend,'*',color='gray',markersize=15)
        #print(model,trend)
        cmip6_mean_hist.append(trend)

for i,exp in enumerate(['ssp119','ssp126','ssp585']):
    for j,(model,period) in enumerate(cmip6_trend_ssp[exp].items()):
        #print(period)
        #if model in exclude:
        #    continue
        #print(model)
        for k,(pre,trend) in enumerate(period.items()):
            if pre != "2020":
              continue
            if (pre == "2020") and (model=="EC-Earth3-Veg"):
              print('add legend')
              ax.plot(plot_x2[pre]+(i+0.005)*0.1,trend,'*',color=colors[i],label=exp,markersize=15)
            else:
              ax.plot(plot_x2[pre]+(i+0.005)*0.1,trend,'*',color=colors[i],markersize=15)

            cmip6_mean_f[pre][exp].append(trend)

#for pre,mean in cmip6_mean_f.items():
        print(np.squeeze(np.array(cmip6_mean_hist)))
        hist_mean_cmip6, weights=calcWmean(np.array(cmip6_mean_hist),0.486)
        ax.plot(plot_x2['hist']+0.15,hist_mean_cmip6,marker='o',color='k',markersize=20,fillstyle=None)

print('historical trend',np.nanmean(cmip6_mean_hist))
for pre,mean in cmip6_mean_f.items():
    for j,exp in enumerate(['ssp119','ssp126','ssp585']):
        a=np.array(cmip6_mean_f[pre][exp])
        # print(a.shape,weights.shape)
        ax.plot(plot_x2[pre]+(j+0.005)*0.1,np.average(a),marker='o',color='k',markersize=20,fillstyle=None)
        #print(pre,exp,np.nanmean(cmip6_mean_f[pre][exp]))

#ax[0].set_ylim(-1,1)
ax.set_ylabel(' Trend CÂ°/decade' ,fontsize=25)
ax.set_xticks([0.5,1.05])#,2.25,3.35])
ax.set_xticklabels(['1980-2019','2020-2050'],fontsize=25)#,'2050-2080','2080-2100'],fontsize=25)
#ax.set_xticklabels(['2020-2050'],fontsize=25)#,'2050-2080','2080-2100'],fontsize=25)


for tick in ax.yaxis.get_major_ticks():
    tick.label.set_fontsize(25)
hist_trend=0.486
ax.plot([-1,2],[hist_trend,hist_trend],linewidth=3,label='OBS')
ax.set_xlim(0.3,1.5)
ax.legend(fontsize=20)
plt.savefig('figure.eps',dpi=1800)
plt.savefig('figure.png')
#ax.set_title('Future warming trends',fontsize=20)

cmip6_mean_hist
print(len(cmip6_trend_ssp['ssp119']))
print(len(cmip6_trend_ssp['ssp126']))
print(len(cmip6_trend_ssp['ssp585']))

output={'historical':[],'ssp119':[],'ssp126':[],'ssp585':[]}
print(len(models))
for model in models:
  output['historical'].append(float(cmip6_trend_hist['ssp585'][model]))
  output['ssp126'].append(float(cmip6_trend_ssp['ssp126'][model]['2020']))
  output['ssp585'].append(float(cmip6_trend_ssp['ssp585'][model]['2020']))

  if model in list(cmip6_trend_ssp['ssp119'].keys()):
      output['ssp119'].append(float(cmip6_trend_ssp['ssp119'][model]['2020']))
  else:
      output['ssp119'].append(np.nan)

df=pd.DataFrame(data=output,index=models)
print(df)
df.to_csv('cmip6_raw_trends.csv')